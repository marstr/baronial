trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

jobs:
- job: Lint
  displayName: Ensure Formatting, Lint

  condition: succeeded()
  pool:
    name: Hosted macOS

  steps:
    - task: GoTool@0
      displayName: 'Use Go 1.12'
      inputs:
        version: 1.12
    - script: |
        set -ev
        mkdir -p ~/go
        export GOPATH=~/go
        export PATH=${PATH}:${GOPATH}/bin
        echo "${GOPATH}"
        go get -u golang.org/x/lint/golint
      displayName: 'Install golint'
    - script: |
        set -ev
        export PATH=${PATH}:${GOPATH}/bin
        make lint
      env:
        GOPATH: /Users/vsts/go
      displayName: 'Run Linters'

- job: LinuxTest
  displayName: Linux
  dependsOn: Lint

  condition: succeeded()
  pool:
    name: Hosted Ubuntu 1604

  steps:
  - task: GoTool@0
    displayName: 'Use Go 1.12'
    inputs:
      version: 1.12
  - script: |
      go get -u github.com/jstemmer/go-junit-report
      PATH="${PATH}:${GOPATH}/bin"
    displayName: "Install Pipeline Dependencies"
  - script: |
      go mod download
    displayName: 'Download Go Dependencies'
  - script: |
      echo "PATH: ${PATH}"
      echo "GOPATH: ${GOPATH}"
      set -ev
      which go-junit-report
      make report.xml
    displayName: 'Execute Tests'
  - task: PublishTestResults@2
    inputs:
      testRunner: JUnit
      testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
  - script: |
      make linux
      cp bin/linux/baronial $BUILD_ARTIFACTSTAGINGDIRECTORY/
    displayName: 'Build Executable'
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'linux'
    displayName: 'Publish Executable'

- job: WindowsTest
  displayName: Windows
  dependsOn: Lint

  condition: succeeded()
  pool:
      name: Hosted

  steps:
  - task: GoTool@0
    displayName: 'Use Go 1.12'
    inputs:
      version: 1.12
  - script: |
      go mod download
    displayName: 'Download Dependencies'
  - task: Go@0
    inputs:
      command: test
      arguments: ./...
    displayName: 'Execute Tests'
  - task: Go@0
    inputs:
      command: build
      arguments: -o $(Build.ArtifactStagingDirectory)/baronial.exe -ldflags "-X github.com/marstr/baronial/cmd.revision=$(Build.SourceVersion)"
    displayName: 'Build Executable'
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'windows'
    displayName: 'Publish Executable'

- job: MacOSXTest
  displayName: MacOSX
  dependsOn: Lint

  condition: succeeded()
  pool:
    name: Hosted macOS

  steps:
  - task: GoTool@0
    displayName: 'Use Go 1.12'
    inputs:
      version: 1.12
  - script: |
      go mod download
    displayName: 'Download Dependencies'
  - script: |
      set -ev
      make test
    displayName: 'Execute Tests'
  - script: |
      make darwin
      cp bin/darwin/baronial $BUILD_ARTIFACTSTAGINGDIRECTORY/
    displayName: 'Build Executable'
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'darwin'
    displayName: 'Publish Executable'

- job: FedoraBuild
  displayName: 'Build Fedora Artifacts'
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Schedule'))

  pool:
    name: Hosted Ubuntu 1604

  steps:
  - script: |
      make fedora
      cp bin/docker/* $BUILD_ARTIFACTSTAGINGDIRECTORY/
  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'fedora'
    displayName: 'Publish Fedora Artifacts'

- job: AlpineBuild
  displayName: 'Build Alpine Artifacts'
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Schedule'))

  pool:
    name: Hosted Ubuntu 1604

  steps:
    - script: |
        make alpine
        cp bin/docker/* $BUILD_ARTIFACTSTAGINGDIRECTORY/
    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: 'alpine'
      displayName: 'Publish Alpine Artifacts'

- job: openSUSEBuild
  displayName: 'Build openSUSE Artifacts'
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Schedule'))

  pool:
    name: Hosted Ubuntu 1604

  steps:
    - script: |
        make opensuse
        cp bin/docker/* $BUILD_ARTIFACTSTAGINGDIRECTORY/
    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: 'openSUSE'
      displayName: 'Publish openSUSE Artifacts'
